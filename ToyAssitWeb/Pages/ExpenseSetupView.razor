@page "/"
@using BlazorBootstrap
@using ToyAssist.Web.DatabaseModels.Models
@using ToyAssist.Web.Helpers
@using System.Text.Json;
@using System.Collections.Generic;


<style>
    @@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed');

    /* body {
                margin: 0;
                font-family: 'Roboto Condensed';
                color: whitesmoke;
                background-color: #1e1e1e;
            } */

    .link-box {
        border: solid 1px rgba(0, 255, 94, 0);
        border-radius: 5px;
        padding: 4px;
        font-size: x-small;
        display: inline-block;
    }

    .box {
        /*         border: solid 1px #0000ff5e;
                border-radius: 5px;
                padding: 4px;
                display: inline-block;
                display: inline-block; */
    }

    .head {
        font-weight: bold;
    }

    .col-descr {
        max-width: 300px;
    }

    .col-amt {
        max-width: 200px;
        text-align: right;
    }

    .col-bill-setting {
        max-width: 150px;
    }

    .col-payment-setting {
        max-width: 200px;
    }

    .col-start-end-dt {
        width: 200px;
        max-width: 200px;
    }

    .col-links {
        width: 200px;
    }

    .model-content-custom {
        background-color: black;
    }

</style>

@code {
    private Modal modal = default!;
    private ExpenseSetup? ModalData = null;
    private async Task OnShowModalClick(ExpenseSetup? data)
    {
        ModalData = data;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    JsonSerializerOptions options = new JsonSerializerOptions
        {
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles,
            WriteIndented = true, // Optional: Make the output more readable

        };
}

<PageTitle>Assist Toy</PageTitle>

<Modal @ref="modal" Title="@ModalData?.ExpenseName">
    <BodyTemplate>
        @if (@ModalData?.StartDate != null && @ModalData.EndDate != null)
        {
            @* Start date and End date *@
            <div>
                <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin:10px 10px 10px 0; color:black;">
                    <div style="font-size:small;display:inline-block;">Start date</div>
                    <br />
                    <div style="display:inline-block;">@ModalData.StartDate.Value.ToShortDateString()</div>
                </div>
                <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin:10px 10px 10px 0; color:black;">
                    <div style="font-size:small;display:inline-block;">End date</div>
                    <br />
                    <div style="display:inline-block;">@ModalData.EndDate.Value.ToShortDateString()</div>
                </div>

                <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin:10px 10px 10px 0; color:black;">
                    <div style="font-size:small;display:inline-block;">Monthly Amount</div>
                    <br />
                    <div style="display:inline-block;">
                        <div style="display:inline-block;">
                            @ModalData.Amount
                        </div>
                        @if ((@ModalData.TaxAmount ?? 0) > 0)
                        {
                            <div style="display:inline-block; margin:0 2px 0 2px;">
                                +
                            </div>
                            <div style="display:inline-block;">
                                @ModalData.TaxAmount
                            </div>
                            <div style="display:inline-block; font-size:small">
                                Tax
                            </div>
                            <br />
                            <div style="display:inline-block;">
                                =
                            </div>
                            <div style="display:inline-block;">
                                @(@ModalData.Amount + @ModalData.TaxAmount)
                            </div>
                        }
                        <div style="display:inline-block; margin:0 0 0 5px">
                            @ModalData?.Currency?.CurrencyCode
                        </div>

                    </div>
                </div>

            </div>
            <div>

                @* Total Months *@
                <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin-left:10px; color:black;">
                    <div>@GeneralHelper.CalculateMonthDifference((DateTime)@ModalData.StartDate, (DateTime)@ModalData.EndDate)</div>
                    <div style="font-size:small;">Total months</div>
                </div>

                @* Total Years + months *@
                @{
                    var totalMonths = @GeneralHelper.CalculateYearMonthDifference((DateTime)@ModalData.StartDate, (DateTime)@ModalData.EndDate);
                }
                @if (totalMonths.Years > 0 || totalMonths.Months > 0)
                {
                    <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin-left:10px; color:black;">
                        @if (totalMonths.Years > 0)
                        {
                            <div style="display:inline-block;">@totalMonths.Years</div>
                            <br />
                            <div style="font-size:small;display:inline-block;">Total years</div>
                        }
                        @if (totalMonths.Years > 0 && totalMonths.Months > 0)
                        {
                            <br />
                            <div style="display:inline-block;margin-left: 2px;"> + </div>
                        }
                        @if (totalMonths.Months > 0)
                        {
                            <div style="display:inline-block;">@totalMonths.Months</div>
                            <div style="font-size:small;display:inline-block;"> Months</div>
                        }
                    </div>
                }

                @* Months Left *@
                <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin-left:10px;color:black;">
                    <div>@GeneralHelper.CalculateMonthDifference(DateTime.Now, (DateTime)@ModalData.EndDate)</div>
                    <div style="font-size:small;">Months left</div>
                </div>

                @* Years + Months Left *@
                @{
                    var yearMonthLeft = @GeneralHelper.CalculateYearMonthDifference(DateTime.Now, (DateTime)@ModalData.EndDate);
                }
                @if (yearMonthLeft.Years > 0 || yearMonthLeft.Months > 0)
                {
                    <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin-left:10px;color:black;">
                        @if (yearMonthLeft.Years > 0)
                        {
                            <div style="display:inline-block;">@yearMonthLeft.Years</div>
                            <br />
                            <div style="font-size:small;display:inline-block;">Years</div>
                        }
                        @if (yearMonthLeft.Years > 0 && yearMonthLeft.Months > 0)
                        {
                            <br />
                            <div style="display:inline-block;margin-left: 2px;"> + </div>
                        }
                        @if (yearMonthLeft.Months > 0)
                        {
                            <div style="display:inline-block;">@yearMonthLeft.Months</div>
                            <div style="font-size:small;display:inline-block;"> Months</div>
                        }
                        <div style="font-size:small;display:inline-block; margin-left:2px;">Left</div>
                    </div>
                }
                <hr />

                <div>
                    <div class="row" style="margin: 2px; padding:2px;">
                        <div class="col-1">
                            Serial
                        </div>
                        <div class="col-4">
                            Date
                        </div>
                        <div class="col-3">
                            Amount
                        </div>
                        <div class="col-4">
                            Status
                        </div>
                    </div>
                    @{

                        var list = GetExpenseRunningList1(@ModalData);

                    }
                    <div style="height:300px; overflow-y:scroll;">
                        @for (var i = 0; i < list.Count; i++)
                        {
                            var currentItemStyle = !@list[i].IsCurrentItem ? "padding:5px; margin:5px;" : "margin: 10px 5px 10px 5px; border: 3px solid red; border-radius: 5px; padding: 10px 2px 10px 2px; background: bisque; color:black; font-size:large;";
                            var currentItemToolTip = @list[i].IsCurrentItem ? "Current Item" : "";

                            <div class="row" style="@currentItemStyle" title="@currentItemToolTip">
                                @if (@list[i].IsCurrentItem)
                                {
                                <div class="row" style="padding: 3px; margin: 4px; color: darkgreen;  font-size: small;">
                                    <div class="col-12">
                                        Current item
                                    </div>
                                </div>
                                }
                                <div class="col-1">
                                    @list[i].Index
                                </div>
                                <div class="col-4">
                                    @list[i].DateAndTime?.ToShortDateString()
                                </div>
                                <div class="col-3">
                                    @list[i].TotalAmount
                                </div>
                                <div class="col-4">
                                    @{
                                        var styleStatus = "";
                                        if (@list[i].IsCurrentItem)
                                        {
                                            styleStatus = "border: 1px solid green; border-radius: 3px; padding: 3px; background: cyan; color: red;";
                                        }
                                        else if (@list[i].Status == "Paid")
                                        {
                                            styleStatus = "border: 1px solid gray; border-radius: 3px; padding: 3px; background: lightgreen; color: black;";
                                        }
                                        else if (@list[i].Status == "Pending")
                                        {
                                            styleStatus = "border: 1px solid gray; border-radius: 3px; padding: 3px; background: lightpink; color: gray;";
                                        }

                                    }
                                    <span style="@styleStatus">
                                        @list[i].Status
                                    </span>
                                </div>
                            </div>

                            if (@list[i].IsYearBreak)
                            {
                                <hr />
                            }

                        }

                    </div>
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="OnHideModalClick">Save changes</Button>
    </FooterTemplate>
</Modal>

@* ================================================================================================ *@


<div class="box" style="width:100%">
    <h2 style="padding:10px;">Expense setup</h2>
    <div class="row">
        <div class="col-12 box">
            <div class="row" style="padding: 5px;">
                <div class="col-12 box">
                    <span style="border: 1px solid #ccc; padding: 6px; border-radius:5px;">
                        <span>
                            Today:
                        </span>
                        <span style="font-weight: bold">
                            @* @DateTime.Now.ToString("yyyy-MM-dd, MMMM, dddd") *@
                        </span>
                        <span>
                            @DateTime.Now.ToLongDateString()
                        </span>
                    </span>
                    <span style="margin-left:10px; border: 1px solid #ccc; padding: 6px; border-radius:5px;white-space: nowrap;">
                        <span>
                            Week number:
                        </span>
                        <span>
                            @GeneralHelper.GetCurrentWeekNumber(DateTime.Now)
                        </span>
                    </span>
                </div>

            </div>
        </div>
    </div>
    <div style="padding:15px; margin: 5px; border:1px solid #ccc; border-radius:5px">
        <div class="row">
            <div class="col-4 head col-descr box">Detail</div>
            <div class="col-2 head col-amt box">Amount</div>
            <div class="col-2 head col-bill-setting box">Bill Generation</div>
            <div class="col-2 head col-payment-setting col box">Payment</div>
            <div class="col-1 head col-start-end-dt box">Start/End</div>
            <div class="col-1 head col-links box"></div>
        </div>

        <hr />
        @{
            var currencyGroups = ExpenseSetups.GroupBy(x => x.Currency).Select(currencyGroup => new { currencyGroup }).ToList();
        }
        @foreach (var currencyGroupItem in currencyGroups)
        {
            var expenseSetupsByCurrency = ExpenseSetups.Where(x => x.CurrencyId == currencyGroupItem.currencyGroup.Key?.CurrencyId).ToList();
            @foreach (var (expenseSetup, index) in expenseSetupsByCurrency.Select((value, i) => (value, i)))
            {
                <div class="row" style="padding: 6px;">
                    <div class="col-4 col-descr box">@expenseSetup.ExpenseName</div>
                    <div class="col-2 col-amt box">
                        <div class="row">
                            <div class="col-12">
                                <span style="display:inline-block" tabindex="0" data-toggle="tooltip" title="@GetConversionListForToolTip(@currencyGroupItem.currencyGroup.Key, (int)@expenseSetup.Amount)">
                                    @expenseSetup.Amount @currencyGroupItem.currencyGroup.Key?.CurrencyCode
                                </span>
                            </div>
                        </div>
                        @if (index == expenseSetupsByCurrency.Count - 1)
                        {
                            <div class="row">
                                <div class="col-12" style="color:#808080a6;">
                                    <hr />
                                    <div style="border: 2px solid rgba(204, 204, 204, 0.8); padding: 3px; border-radius: 3px">
                                        <div>
                                            <span>
                                                @currencyGroupItem.currencyGroup.Key?.CurrencyCode total:
                                            </span>
                                            <span style="font-weight: bold">
                                                @expenseSetupsByCurrency.Sum(x => x.Amount) @currencyGroupItem.currencyGroup.Key?.CurrencyCode
                                            </span>
                                        </div>
                                        <div style="margin:5px;">
                                            @{
                                                var conversionItems = GetConversionList(@currencyGroupItem.currencyGroup.Key, (int)@expenseSetupsByCurrency.Sum(x => x.Amount));
                                            }
                                            @if (conversionItems.Count > 0)
                                            {
                                                <span>
                                                    ≈
                                                </span>
                                            }
                                            @foreach (var conversionItem in conversionItems)
                                            {
                                                <div style="font-size: small; border: 1px solid #ccc; margin: 5px; padding: 5px; display: inline-block; border-radius: 4px;">
                                                    @conversionItem
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-2 col-bill-setting box">
                        @if ((expenseSetup.BillGeneratedDay ?? 0) != 0)
                        {
                            <span>
                                @expenseSetup.BillGeneratedDay.ToString()
                            </span>
                            <sup>
                                @(GeneralHelper.GetOrdinalSuffix((expenseSetup.BillGeneratedDay)))
                            </sup>
                            <span>
                                of every month
                            </span>
                        }
                    </div>
                    <div class="col-2 col-payment-setting box">
                        @if ((expenseSetup.BillPaymentDay ?? 0) != 0)
                        {
                            <span>
                                @expenseSetup.BillPaymentDay
                            </span>
                            <sup>
                                @(GeneralHelper.GetOrdinalSuffix((expenseSetup.BillPaymentDay)))
                            </sup>
                            <span>
                                of every month
                            </span>
                        }
                    </div>
                    <div class="col-1 col-start-end-dt box">
                        <div style="padding:3px;">
                            @{
                                var recurringInfo = @GetRecurringInfo(@expenseSetup.StartDate, @expenseSetup.EndDate);
                            }
                            @for (int i = 0; i < recurringInfo.Count; i++)
                            {
                                var fontSize = i != 0 ? "font-size: small" : "";
                                <div data-toggle="tooltip" title="@recurringInfo[i].ToolTipText" style="@fontSize">
                                    @recurringInfo[i].Text
                                </div>
                            }
                            <Button Color="ButtonColor.Secondary" Outline="true" Size="Size.ExtraSmall" @onclick="(data)=>OnShowModalClick(expenseSetup)">
                                <Icon Name="IconName.ThreeDots" />
                            </Button>
                        </div>
                    </div>
                    <div class="col-1 box" style="display: inline-block;">
                        @if (!string.IsNullOrEmpty(expenseSetup.PaymentUrl))
                        {
                            <a href="@expenseSetup.PaymentUrl" target="_blank" class="link-box">Payment</a>
                        }
                        @if (!string.IsNullOrEmpty(expenseSetup.PaymentUrl))
                        {
                            <a href="@expenseSetup.AccountProfileUrl" target="_blank" class="link-box"> Account</a>
                        }
                    </div>
                </div>
                <hr style="border:1px black; border-style: inset;" />
            }
        }
    </div>
</div>