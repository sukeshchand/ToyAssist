@using BlazorBootstrap
@using System.Text.Json.Serialization
@using ToyAssist.Web.DatabaseModels.Models
@using ToyAssist.Web.Helpers
@using System.Text.Json;
@using System.Collections.Generic;
@using ToyAssist.Web.TypeExtensions;
@inject IJSRuntime JSRuntime;

@{
    JsonSerializerOptions options = new()
            {
                ReferenceHandler = ReferenceHandler.IgnoreCycles,
                WriteIndented = true
            };
}

<Modal @ref="@ModalRef" Title="@ModalData?.ExpenseName" Size="ModalSize.Large">
    <BodyTemplate>
        <div>
            @ModalData.ExpenseName
        </div>
        <div class="row" style="padding: 10px;">
            @* Start date*@
            <div class="col-3" style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin:10px 10px 10px 0; color:black;">
                <div style="font-size:small;display:inline-block;">Start date</div>
                <br />
                <div style="display:inline-block;">
                    @(@ModalData.StartDate == null ? "N/A" : @ModalData.StartDate.Value.ToShortDateString())
                </div>
            </div>

            @* End date*@
            <div class="col-3" style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin:10px 10px 10px 0; color:black;">
                <div style="font-size:small;display:inline-block;">End date</div>
                <br />
                <div style="display:inline-block;">
                    @(@ModalData.EndDate == null ? "N/A" : @ModalData.EndDate.Value.ToShortDateString())
                </div>
            </div>
            <div class="col-6">
            </div>
        </div>

        <div class="row" style="padding: 10px;">
            @* Monthly Amount *@
            <div class="col-3" style="max-width:180px; display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin:10px 10px 10px 0; color:black;">
                <div style="font-size:small;display:inline-block;">Monthly Amount</div>
                <br />
                @if (@ModalData.Amount != null)
                {
                    <div style="display:inline-block;">
                        <div style="display:inline-block;">
                            @ModalData.Amount.ToStringCustom()
                        </div>
                        @if ((@ModalData.TaxAmount ?? 0) > 0)
                        {
                            <div style="display:inline-block; margin:0 2px 0 2px;">
                                +
                            </div>
                            <div style="display:inline-block;">
                                @ModalData.TaxAmount.ToStringCustom()
                            </div>
                            <div style="display:inline-block; font-size:small">
                                Tax
                            </div>
                            <br />
                            <div style="display:inline-block;">
                                =
                            </div>
                            <div style="display:inline-block;">
                                @((@ModalData.Amount + @ModalData.TaxAmount).ToStringCustom())
                            </div>
                        }
                        <div style="display:inline-block; margin:0 0 0 5px">
                            @ModalData?.Currency?.CurrencyCode
                        </div>

                    </div>
                }
                else
                {
                    <div style="display:inline-block;">
                        N/A
                    </div>
                }
            </div>

            @* Total Amount to be paid *@
            @{
                var totalInfo = ExpenseSetupView.CalculateTotalAmountToBePaidInfo(@ModalData);
            }
            <div class="col-3" style="max-width:180px; display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin:10px 10px 10px 0; color:black;">

                <div style="font-size:small;display:inline-block;">Total amount</div>
                <br />
                @if (!totalInfo.IsError)
                {
                    <div style="display:inline-block;">
                        <div style="display:inline-block;">
                            @totalInfo.TotalAmount.ToStringCustom()
                        </div>
                        @if ((@ModalData.TaxAmount ?? 0) > 0)
                        {
                            <div style="display:inline-block; margin:0 2px 0 2px;">
                                +
                            </div>
                            <div style="display:inline-block;">
                                @totalInfo.TotalTax.ToStringCustom()
                            </div>
                            <div style="display:inline-block; font-size:small">
                                Tax
                            </div>
                            <br />
                            <div style="display:inline-block;">
                                =
                            </div>
                            <div style="display:inline-block;">
                                @((@totalInfo.TotalAmount + @totalInfo.TotalTax).ToStringCustom())
                            </div>
                        }
                        <div style="display:inline-block; margin:0 0 0 5px">
                            @ModalData?.Currency?.CurrencyCode
                        </div>
                    </div>
                }
                else
                {
                    <div style="font-size:small;display:inline-block;">N/A</div>
                }
            </div>

            @* Total Paid Amount *@
            @{
                var totalPaidInfo = ExpenseSetupView.CalculateTotalAmountAlreadyPaidInfo(@ModalData);
            }
            <div class="col-3" style="max-width:180px; display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin:10px 10px 10px 0; color:black;">
                <div style="font-size:small;display:inline-block;">Total paid till now</div>
                <br />
                @if (!totalPaidInfo.IsError)
                {
                    <div style="display:inline-block;">
                        <div style="display:inline-block;">
                            @totalPaidInfo.TotalAmount.ToStringCustom()
                        </div>
                        @if ((@ModalData.TaxAmount ?? 0) > 0)
                        {
                            <div style="display:inline-block; margin:0 2px 0 2px;">
                                +
                            </div>
                            <div style="display:inline-block;">
                                @totalPaidInfo.TotalTax.ToStringCustom()
                            </div>
                            <div style="display:inline-block; font-size:small">
                                Tax
                            </div>
                            <br />
                            <div style="display:inline-block;">
                                =
                            </div>
                            <div style="display:inline-block;">
                                @((@totalPaidInfo.TotalAmount + @totalPaidInfo.TotalTax).ToStringCustom())
                            </div>
                        }
                        <div style="display:inline-block; margin:0 0 0 5px">
                            @ModalData?.Currency?.CurrencyCode
                        </div>

                    </div>
                }
                else
                {
                    <div style="font-size:small;display:inline-block;">N/A</div>
                }
            </div>


            @* Total Left Amount *@
            @{
                var totalLeftInfo = ExpenseSetupView.CalculateTotalAmountLeftToPayInfo(@ModalData);
            }
            <div class="col-3" style="max-width:180px; display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin:10px 10px 10px 0; color:black;">
                <div style="font-size:small;display:inline-block;">Total left</div>
                <br />
                @if (!totalLeftInfo.IsError)
                {

                    <div style="display:inline-block;">
                        <div style="display:inline-block;">
                            @totalLeftInfo.TotalAmount.ToStringCustom()
                        </div>
                        @if ((@ModalData.TaxAmount ?? 0) > 0)
                        {
                            <div style="display:inline-block; margin:0 2px 0 2px;">
                                +
                            </div>
                            <div style="display:inline-block;">
                                @totalLeftInfo.TotalTax.ToStringCustom()
                            </div>
                            <div style="display:inline-block; font-size:small">
                                Tax
                            </div>
                            <br />
                            <div style="display:inline-block;">
                                =
                            </div>
                            <div style="display:inline-block;">
                                @((@totalLeftInfo.TotalAmount + @totalLeftInfo.TotalTax).ToStringCustom())
                            </div>
                        }
                        <div style="display:inline-block; margin:0 0 0 5px">
                            @ModalData?.Currency?.CurrencyCode
                        </div>

                    </div>
                }
                else
                {
                    <div style="font-size:small;display:inline-block;">N/A</div>
                }

            </div>
        </div>

        @* Total Months *@
        <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin-left:10px; color:black;">
            <div style="font-size:small;">Total months</div>
            @if (@ModalData?.StartDate != null && @ModalData.EndDate != null)
            {
                <div>@GeneralHelper.CalculateMonthDifference((DateTime)@ModalData.StartDate, (DateTime)@ModalData.EndDate)</div>
            }
            else
            {
                <div>N/A</div>
            }
        </div>

        @* Total Years + months *@
        @{
            var totalYearAndMonths = @GeneralHelper.CalculateYearMonthDifference(@ModalData.StartDate, @ModalData.EndDate);
        }

        <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:cyan; margin-left:10px; color:black;">
            <div style="font-size:small;">Total years</div>
            @if (!totalYearAndMonths.IsError)
            {
                @if (totalYearAndMonths.Years > 0)
                {
                    <div style="display:inline-block;">@totalYearAndMonths.Years</div>
                    <div style="display:inline-block; font-size:small;">years</div>
                }
                @if (totalYearAndMonths.Years > 0 && totalYearAndMonths.Months > 0)
                {
                    <div style="display:inline-block;margin-left: 2px;"> </div>
                }
                @if (totalYearAndMonths.Months > 0)
                {
                    <div style="display:inline-block;">@totalYearAndMonths.Months</div>
                    <div style="font-size:small;display:inline-block;"> Months</div>
                }
            }
            else
            {
                <div style="display:inline-block;">N/A</div>
            }
        </div>


        @* Months Left *@
        <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin-left:10px;color:black;">
            <div style="font-size:small;">Months left</div>
            <div>
                @if (@ModalData.EndDate != null)
                {
                    @GeneralHelper.CalculateMonthDifference(DateTime.Now, (DateTime)@ModalData.EndDate)
                }
                else
                {
                    <span>N/A</span>
                }
            </div>
        </div>

        @* Years + Months Left *@
        @{
            var yearMonthLeft = @GeneralHelper.CalculateYearMonthDifference(DateTime.Now, @ModalData.EndDate);
        }

        <div style="display: inline-block; text-align:center; border:1px solid #ccc; padding:5px; border-radius:5px; background-color:aquamarine; margin-left:10px;color:black;">
            <div style="font-size:small;">Years left</div>
            @if (!yearMonthLeft.IsError && (yearMonthLeft.Years > 0 || yearMonthLeft.Months > 0))
            {
                @if (yearMonthLeft.Years > 0)
                {
                    <div style="display:inline-block;">@yearMonthLeft.Years</div>
                    <div style="font-size:small;display:inline-block;">years</div>
                }
                @if (yearMonthLeft.Years > 0 && yearMonthLeft.Months > 0)
                {
                    <div style="display:inline-block;margin-left: 2px;"> </div>
                }
                @if (yearMonthLeft.Months > 0)
                {
                    <div style="display:inline-block;">@yearMonthLeft.Months</div>
                    <div style="font-size:small;display:inline-block;"> months</div>
                }
            }
            else
            {
                <div style="display:inline-block;">N/A</div>
            }
        </div>

        <hr />

        @if (@ModalData?.StartDate != null && @ModalData.EndDate != null)
        {
            <div>
                <div>
                    <div class="row" style="margin: 2px; padding:2px;">
                        <div class="col-1">
                            Serial
                        </div>
                        <div class="col-4">
                            Date
                        </div>
                        <div class="col-3">
                            Amount
                        </div>
                        <div class="col-4">
                            Status
                        </div>
                    </div>
                    @{

                        var list = GetExpenseRunningList(@ModalData);
                    }
                    <div style="height:300px; overflow-y:scroll;">
                        @for (var i = 0; i < list.Count; i++)
                        {
                            var currentItemStyle = !@list[i].IsCurrentItem ? "padding:5px; margin:5px;" : "margin: 10px 5px 10px 5px; border: 3px solid red; border-radius: 5px; padding: 10px 2px 10px 2px; background: bisque; color:black; font-size:large;";
                            var currentItemToolTip = @list[i].IsCurrentItem ? "Current Item" : "";
                            if (list[i].IsCurrentItem)
                            {
                                <div class="row" @ref="@elementRefToScrollInto">
                                    <div class="col">
                                    </div>
                                </div>
                            }
                            <div class="row" style="@currentItemStyle" title="@currentItemToolTip">
                                @if (@list[i].IsCurrentItem)
                                {
                                    <div class="row" style="padding: 3px; margin: 4px; color: darkgreen;  font-size: small;">
                                        <div class="col-12">
                                            Current item
                                        </div>
                                    </div>
                                }
                                <div class="col-1">
                                    @list[i].Index
                                </div>
                                <div class="col-4">
                                    @list[i].DateAndTime?.ToShortDateString()
                                </div>
                                <div class="col-3">
                                    @(list[i].TotalAmount.ToStringCustom())
                                </div>
                                <div class="col-4">
                                    @{
                                        var styleStatus = "";
                                        if (@list[i].IsCurrentItem)
                                        {
                                            styleStatus = "border: 1px solid green; border-radius: 3px; padding: 3px; background: cyan; color: red;";
                                        }
                                        else if (@list[i].Status == "Paid")
                                        {
                                            styleStatus = "border: 1px solid gray; border-radius: 3px; padding: 3px; background: lightgreen; color: black;";
                                        }
                                        else if (@list[i].Status == "Pending")
                                        {
                                            styleStatus = "border: 1px solid gray; border-radius: 3px; padding: 3px; background: lightpink; color: gray;";
                                        }

                                    }
                                    <span style="@styleStatus">
                                        @list[i].Status
                                    </span>
                                </div>
                            </div>

                            if (@list[i].IsYearBreak)
                            {
                                <hr />
                            }

                        }

                    </div>
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="OnHideModalClick">Save changes</Button>
    </FooterTemplate>
</Modal>